{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  orderCart: {\n    name: null,\n    qty: null,\n    actualPrice: null,\n    discountedPrice: null,\n    percentageDiscount: null\n  }\n};\nconst cakeSlice = createSlice({\n  name: 'cake',\n  initialState,\n  reducers: {\n    ordered: (state, action) => {\n      console.log('slice', action);\n      state.orderCart.name = action.payload.name;\n      state.orderCart.qty = action.payload.qty;\n      state.orderCart.actualPrice = action.payload.actualPrice;\n      state.orderCart.discountedPrice = action.payload.discountedPrice;\n      state.orderCart.percentageDiscount = action.payload.percentageDiscount;\n    },\n    restocked: (state, action) => {\n      state.noOfCakes += action.payload;\n    }\n  }\n});\nexport default cakeSlice.reducer;\nexport const {\n  ordered,\n  restocked\n} = cakeSlice.actions;\n\n// the cakeslice exports two actions called ordered and restocked \n// the action/types that are exported are cake/ordered and cake/restocked action type.","map":{"version":3,"names":["createSlice","initialState","orderCart","name","qty","actualPrice","discountedPrice","percentageDiscount","cakeSlice","reducers","ordered","state","action","console","log","payload","restocked","noOfCakes","reducer","actions"],"sources":["/Users/gsrrinathreddy/training/redux and rtk/react-rtk-cakeshop/src/features/cakes/cakesSlice.js"],"sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\n\n\nconst initialState = {\n    orderCart:{\n        name:null,\n        qty:null,\n        actualPrice:null,\n        discountedPrice:null,\n        percentageDiscount:null\n    }\n    \n}\nconst cakeSlice = createSlice({\n    name:'cake',\n    initialState,\n    reducers:{\n        ordered:(state,action)=>{\n            console.log('slice',action)\n            state.orderCart.name =  action.payload.name;\n            state.orderCart.qty = action.payload.qty;\n            state.orderCart.actualPrice = action.payload.actualPrice;\n            state.orderCart.discountedPrice = action.payload.discountedPrice;\n            state.orderCart.percentageDiscount = action.payload.percentageDiscount;\n        },\n        restocked:(state,action)=>{\n            state.noOfCakes += action.payload;\n        }\n    }\n})\n\n\nexport default cakeSlice.reducer;\nexport const {ordered,restocked} = cakeSlice.actions; \n\n// the cakeslice exports two actions called ordered and restocked \n// the action/types that are exported are cake/ordered and cake/restocked action type. \n\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAG5C,MAAMC,YAAY,GAAG;EACjBC,SAAS,EAAC;IACNC,IAAI,EAAC,IAAI;IACTC,GAAG,EAAC,IAAI;IACRC,WAAW,EAAC,IAAI;IAChBC,eAAe,EAAC,IAAI;IACpBC,kBAAkB,EAAC;EACvB;AAEJ,CAAC;AACD,MAAMC,SAAS,GAAGR,WAAW,CAAC;EAC1BG,IAAI,EAAC,MAAM;EACXF,YAAY;EACZQ,QAAQ,EAAC;IACLC,OAAO,EAAC,CAACC,KAAK,EAACC,MAAM,KAAG;MACpBC,OAAO,CAACC,GAAG,CAAC,OAAO,EAACF,MAAM,CAAC;MAC3BD,KAAK,CAACT,SAAS,CAACC,IAAI,GAAIS,MAAM,CAACG,OAAO,CAACZ,IAAI;MAC3CQ,KAAK,CAACT,SAAS,CAACE,GAAG,GAAGQ,MAAM,CAACG,OAAO,CAACX,GAAG;MACxCO,KAAK,CAACT,SAAS,CAACG,WAAW,GAAGO,MAAM,CAACG,OAAO,CAACV,WAAW;MACxDM,KAAK,CAACT,SAAS,CAACI,eAAe,GAAGM,MAAM,CAACG,OAAO,CAACT,eAAe;MAChEK,KAAK,CAACT,SAAS,CAACK,kBAAkB,GAAGK,MAAM,CAACG,OAAO,CAACR,kBAAkB;IAC1E,CAAC;IACDS,SAAS,EAAC,CAACL,KAAK,EAACC,MAAM,KAAG;MACtBD,KAAK,CAACM,SAAS,IAAIL,MAAM,CAACG,OAAO;IACrC;EACJ;AACJ,CAAC,CAAC;AAGF,eAAeP,SAAS,CAACU,OAAO;AAChC,OAAO,MAAM;EAACR,OAAO;EAACM;AAAS,CAAC,GAAGR,SAAS,CAACW,OAAO;;AAEpD;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}